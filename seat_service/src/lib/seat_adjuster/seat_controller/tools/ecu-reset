#!/bin/sh
#********************************************************************************
# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License 2.0 which is available at
# http://www.apache.org/licenses/LICENSE-2.0
#
# SPDX-License-Identifier: Apache-2.0
#*******************************************************************************/
# shellcheck disable=SC2181

# how many can read timeouts are accepted before bailing out (no can hw)
MAX_RETRIES=3
# motor pwm % for commands. WARNING: Setting 100% did not finish the learning.
MOTOR1_RPM=80

# timeout for aborting calibration (seconds)
TIMEOUT=60
STAT=0
VERBOSE=0
FORCE=0
CAN="can0"

while [ $# -gt 0 ]; do
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        echo "Usage: $0 {-h} {-s} {-v} {-f} {-t timeout_sec} {can_if}"
        echo "   can_if: CAN interface to use. Default: can0";
        echo "   -s: Prints RX Can frames (Useful for troubleshooting)"
        echo "   -t: timeout in seconds to abort operation. Default: $TIMEOUT sec";
        echo "   -f: Force calibration even if motor reports learned state";
        echo "   -h: Prints this message";
        exit 0
    elif [ "$1" = "-v" ]; then
        VERBOSE=1
    elif [ "$1" = "-f" ]; then
        FORCE=1
    elif [ "$1" = "-s" ]; then
        STAT=1
    elif [ "$1" = "-t" ]; then
        shift # get next arg
        TIMEOUT=$1
    else
        CAN="$1"
    fi
    shift
done

echo "### Normalizing SeatAdjust ECU on $CAN"


motor1_off() {
    _frame=$(printf "cansend %s 705#00.00.00.00.00.00.00.00" "$CAN")
    echo "TX: [motor-OFF] $_frame"
    eval "$_frame"
    sleep 0.5
}

motor1_inc() {
    _rpm="$1"
    _frame=$(printf "cansend %s 705#02.%02X.00.00.00.00.00.00" "$CAN" "$_rpm")
    echo "TX: [motor-INC] $_frame"
    eval "$_frame"
    sleep 0.2
}

motor1_dec() {
    _rpm="$1"
    _frame=$(printf "cansend %s 705#01.%02X.00.00.00.00.00.00" "$CAN" "$_rpm")
    echo "TX: [motor-DEC] $_frame"
    eval "$_frame"
    sleep 0.2
}

motor2_invalid() {
    _frame=$(printf "cansend %s 707#03.00.00.00.00.00.00.00" "$CAN")
    echo "TX: [motor-INVALID] $_frame"
    eval "$_frame"
    sleep 5.0
}

motor3_invalid() {
    _frame=$(printf "cansend %s 705#30.00.00.00.00.00.00.00" "$CAN")
    echo "TX: [motor-INVALID] $_frame"
    eval "$_frame"
    sleep 5.0
}

read_can_frame() {
    _can="$1"
    _id="$2"
    candump -T 1000 -n 1 -L "$_can","$2":7FF | cut -d ' ' -f 3
}

parse_motor1_pos() {
    _frame="$1"
    # only handle 0x712 canid
    if [ "$(echo "$_frame" | cut -c-4)" != "712#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # pos_hex is 3rd byte
    _pos_hex=$(echo "$_data" | cut -c5-6) # "{data:4:2}"
    echo "$(( 0x${_pos_hex} ))"
    return 0
}

parse_motor1_mov() {
    _frame="$1"
    # only handle 0x712 canid
    if [ "$(echo "$_frame" | cut -c-4)" != "712#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # mov_hex is 2nd & 0x0F
    _mov_hex=$(echo "$_data" | cut -c2) # "{data:1:1}"
    case $(( _mov_hex & 0x03 )) in
        0) echo "OFF";;
        1) echo "DEC";;
        2) echo "INC";;
        *) echo "INV"
           return 1;;
    esac
    return 0
}

parse_motor1_lrn() {
    _frame="$1"
    # only handle 0x712 canid
    if [ "$(echo "$_frame" | cut -c -4)" != "712#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # mov_hex is 2nd & 0x0F
    _mov_hex=$(echo "$_data" | cut -c2) # {data:1:1}
    case $(( (_mov_hex >> 2) & 0x03 )) in
        0) echo "NOT";;
        1) echo "LRN";;
        2) echo "INV";;
        *) echo "???"
           return 1;;
    esac
    return 0
}

parse_motor2_pos() {
    _frame="$1"
    # only handle 0x714 canid
    if [ "$(echo "$_frame" | cut -c-4)" != "714#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # pos_hex is 3rd byte
    _pos_hex=$(echo "$_data" | cut -c5-6) # "{data:4:2}"
    echo "$(( 0x${_pos_hex} ))"
    return 0
}

parse_motor2_mov() {
    _frame="$1"
    # only handle 0x714 canid
    if [ "$(echo "$_frame" | cut -c-4)" != "714#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # mov_hex is 2nd & 0x0F
    _mov_hex=$(echo "$_data" | cut -c2) # "{data:1:1}"
    case $(( _mov_hex & 0x03 )) in
        0) echo "OFF";;
        1) echo "DEC";;
        2) echo "INC";;
        *) echo "INV"
           return 1;;
    esac
    return 0
}

parse_motor2_lrn() {
    _frame="$1"
    # only handle 0x714 canid
    if [ "$(echo "$_frame" | cut -c -4)" != "714#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # mov_hex is 2nd & 0x0F
    _mov_hex=$(echo "$_data" | cut -c2) # {data:1:1}
    case $(( (_mov_hex >> 2) & 0x03 )) in
        0) echo "NOT";;
        1) echo "LRN";;
        2) echo "INV";;
        *) echo "???"
           return 1;;
    esac
    return 0
}

parse_motor3_pos() {
    _frame="$1"
    # only handle 0x714 canid
    if [ "$(echo "$_frame" | cut -c-4)" != "714#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # pos_hex is 3rd byte
    _pos_hex=$(echo "$_data" | cut -c5-6) # "{data:4:2}"
    echo "$(( 0x${_pos_hex} ))"
    return 0
}

parse_motor3_mov() {
    _frame="$1"
    # only handle 0x714 canid
    if [ "$(echo "$_frame" | cut -c-4)" != "714#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # mov_hex is 2nd & 0x0F
    _mov_hex=$(echo "$_data" | cut -c2) # "{data:1:1}"
    case $(( _mov_hex & 0x03 )) in
        0) echo "OFF";;
        1) echo "DEC";;
        2) echo "INC";;
        *) echo "INV"
           return 1;;
    esac
    return 0
}

parse_motor3_lrn() {
    _frame="$1"
    # only handle 0x714 canid
    if [ "$(echo "$_frame" | cut -c -4)" != "714#" ]; then  # "{frame:0:4}"
        return 1;
    fi
    _data="${_frame#*#}"
    # mov_hex is 2nd & 0x0F
    _mov_hex=$(echo "$_data" | cut -c2) # {data:1:1}
    case $(( (_mov_hex >> 2) & 0x03 )) in
        0) echo "NOT";;
        1) echo "LRN";;
        2) echo "INV";;
        *) echo "???"
           return 1;;
    esac
    return 0
}

old_frame1="---" # invalidate
old_frame2="---" # invalidate

## normalization states
# 0=all_motor_learned; 1=motor1_inc; 2=motor1_dec; 3=motor2_inc; 4=motor2_dec; 5=motor3_inc; 6=motor3_dec
state=0

ts_start=$(date '+%s')
failures=0
while true; do
    frame1=$(read_can_frame "$CAN" 712)
    frame2==$(read_can_frame "$CAN" 714)
    if [ $? -ne 0 ]; then
        echo "Aborted. Can't read from $CAN ..."
        exit 1
    fi
    ts_now=$(date '+%s')
    ts_elapsed=$((ts_now - ts_start))
    if [ $ts_elapsed -ge "$TIMEOUT" ]; then
        echo "### Aborted after $ts_elapsed sec." 1>&2
        exit 1
    fi
    if [ -z "$frame" ]; then
        echo "RX: No can data, retry: $failures" 1>&2
        failures=$((failures+1))
         if [ $failures -ge $MAX_RETRIES ]; then
            echo "### Aborted (no can frames) after $ts_elapsed sec." 1>&2
            exit 2
         fi
         continue
    else
        failures=0 # reset counter on incoming can frame...
    fi
    if [ "$frame1" == "$old_frame1" ]; then
        #sleep 0
        continue
    fi
    if [ "$frame2" == "$old_frame2" ]; then
        #sleep 0
        continue
    fi

    pos1=$(parse_motor_pos "$frame1")
    mov1=$(parse_motor1_mov "$frame1")
    lrn1=$(parse_motor1_lrn "$frame1")
    pos2=$(parse_motor2_pos "$frame2")
    mov2=$(parse_motor2_mov "$frame2")
    lrn2=$(parse_motor2_lrn "$frame2")
    pos3=$(parse_motor2_pos "$frame2")
    mov3=$(parse_motor2_mov "$frame2")
    lrn3=$(parse_motor2_lrn "$frame2")

    [ -n "$frame1" ] && [ "$STAT" = "1" ] && printf 'RX: SECU1_STAT {pos1:%3d%% mov1:%3s, lrn1:%3s} \tframe: %s\n' "$pos1" "$mov1" "$lrn1" "$frame"
    old_frame1="$frame1"

    [ -n "$frame2" ] && [ "$STAT" = "1" ] && printf 'RX: SECU1_STAT {pos2:%3d%% mov2:%3s, lrn2:%3s; pos3:%3d%% mov3:%3s, lrn3:%3s} \tframe: %s\n' "$pos2" "$mov2" "$lrn2" "$pos3" "$mov3" "$lrn3" "$frame"
    old_frame2="$frame2"

    # handle fsm
    case $state in
        0) ## 0. learn motor 1
           # check if motor is in learned state and check the next one
            if [ "$pos1" != "255" ] && [ "$lrn1" != "NOT" ]; then
                if [ $FORCE -eq 1 ]; then
                    echo "[Status Check] Running calibration on learned state (forced)"
                else
                    echo "[Status Check] Motor 1 is learned. Checking next one ..."
                    state = 4
                fi
            fi
            echo "0: [motor++]"
            motor1_off
            motor1_inc $MOTOR1_RPM
            state=1
            #old_frame=""
            ;;
        1) ## 1. wait for mov OFF state, then motor1_dec
            if [ "$mov1" = "OFF" ]; then
                echo "1: [motor--]"
                motor1_off
                motor1_dec $MOTOR1_RPM
                state=2
                #old_frame=""
            else
                [ "$VERBOSE" = "1" ] && echo "1: [++] waiting OFF..."
            fi
            ;;
        2) ## 2. wait for mov OFF state, then motor1_inc
            if [ "$mov1" = "OFF" ]; then
                echo "2: [motor++]"
                motor1_off
                motor1_inc $MOTOR_RPM
                state=3
                #old_frame=""
            else
                [ "$VERBOSE" = "1" ] && echo "2: [--] waiting OFF..."
            fi
            ;;
        3) ## 3. wait for mov OFF state, then finish
            if [ "$mov1" = "OFF" ]; then
                echo "3: [*] Normalize finished"
                state=4 
                echo "### Motor 1 state: [$lrn1]"
                #old_frame=""
                break
            else
                [ "$VERBOSE" = "1" ] && echo "3: [++] waiting OFF..."
            fi
            ;;

        4) ## 4. learn motor 2
            # check if motor is in learned state and abort
            ID=714
            if [ "$lrn2" != "NOT" ] ; then
                if [ $FORCE -eq 1 ]; then
                    echo "[Status Check] Running calibration on learned state (forced)"
                else
                    echo "[Status Check] Motor 2 is learned. Checking next one ..."
                    state = 5
                fi
            fi

            if [ "$lrn2" == "NOT" ]
                motor2_invalid
                echo "### Motor 2 state: [$lrn2]"

            #old_frame=""
            ;;
        5) ## 5. learn motor3
            # check if motor is in learned state and abort
            if [ "$lrn3" != "NOT" ] ; then
                if [ $FORCE -eq 1 ]; then
                    echo "[Status Check] Running calibration on learned state (forced)"
                else
                    echo "[Status Check] Motor 3 is learned. Aborting"
                    state = 6 #terminal state
                fi
            fi

            if [ "$lrn3" == "NOT" ]
                motor3_invalid
                echo "### Motor 3 state: [$lrn3]"

            #old_frame=""
            ;;
    esac
done

# stop the motor
motor1_off
motor2_off
motor3_off

1